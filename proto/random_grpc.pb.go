// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package random

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RandomClient is the client API for Random service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomClient interface {
	// Returns random number
	GenerateRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (*RandomNumberReply, error)
	// Returns random numbers
	StreamNumbers(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (Random_StreamNumbersClient, error)
}

type randomClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomClient(cc grpc.ClientConnInterface) RandomClient {
	return &randomClient{cc}
}

func (c *randomClient) GenerateRandomNumber(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (*RandomNumberReply, error) {
	out := new(RandomNumberReply)
	err := c.cc.Invoke(ctx, "/random.Random/GenerateRandomNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomClient) StreamNumbers(ctx context.Context, in *RandomNumberRequest, opts ...grpc.CallOption) (Random_StreamNumbersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Random_serviceDesc.Streams[0], "/random.Random/StreamNumbers", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomStreamNumbersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Random_StreamNumbersClient interface {
	Recv() (*RandomNumberReply, error)
	grpc.ClientStream
}

type randomStreamNumbersClient struct {
	grpc.ClientStream
}

func (x *randomStreamNumbersClient) Recv() (*RandomNumberReply, error) {
	m := new(RandomNumberReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomServer is the server API for Random service.
// All implementations must embed UnimplementedRandomServer
// for forward compatibility
type RandomServer interface {
	// Returns random number
	GenerateRandomNumber(context.Context, *RandomNumberRequest) (*RandomNumberReply, error)
	// Returns random numbers
	StreamNumbers(*RandomNumberRequest, Random_StreamNumbersServer) error
	mustEmbedUnimplementedRandomServer()
}

// UnimplementedRandomServer must be embedded to have forward compatible implementations.
type UnimplementedRandomServer struct {
}

func (*UnimplementedRandomServer) GenerateRandomNumber(context.Context, *RandomNumberRequest) (*RandomNumberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateRandomNumber not implemented")
}
func (*UnimplementedRandomServer) StreamNumbers(*RandomNumberRequest, Random_StreamNumbersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamNumbers not implemented")
}
func (*UnimplementedRandomServer) mustEmbedUnimplementedRandomServer() {}

func RegisterRandomServer(s *grpc.Server, srv RandomServer) {
	s.RegisterService(&_Random_serviceDesc, srv)
}

func _Random_GenerateRandomNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomServer).GenerateRandomNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/random.Random/GenerateRandomNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomServer).GenerateRandomNumber(ctx, req.(*RandomNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Random_StreamNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandomNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomServer).StreamNumbers(m, &randomStreamNumbersServer{stream})
}

type Random_StreamNumbersServer interface {
	Send(*RandomNumberReply) error
	grpc.ServerStream
}

type randomStreamNumbersServer struct {
	grpc.ServerStream
}

func (x *randomStreamNumbersServer) Send(m *RandomNumberReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Random_serviceDesc = grpc.ServiceDesc{
	ServiceName: "random.Random",
	HandlerType: (*RandomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateRandomNumber",
			Handler:    _Random_GenerateRandomNumber_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamNumbers",
			Handler:       _Random_StreamNumbers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "random.proto",
}
